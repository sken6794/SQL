--서브 쿼리
--SELECT 문이 SELECT 구문으로 들어가는 형태 : 스칼라 서브쿼리
--SELECT 문이 FROM 구문으로 들어가는 형태 : 인라인 뷰
--SELECT 문이 WHERE 구문으로 들어가면 : 서브쿼리
--서브쿼리는 반드시 () 안에 적는다.

--단일행 서브쿼리 : 리턴되는 행이 1개인 서브쿼리

SELECT SALARY FROM EMPLOYEES WHERE FIRST_NAME = 'Nancy';

SELECT * FROM EMPLOYEES 
WHERE SALARY > (SELECT SALARY FROM EMPLOYEES WHERE FIRST_NAME = 'Nancy');

--EMPLOYEE_ID 가 103번인 사람과 동일한 직군
SELECT JOB_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 103;
SELECT * FROM EMPLOYEES 
WHERE JOB_ID = (SELECT JOB_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 103);

--주의할 점 , 단일행 이어야  한다. 컬럼값도 1개 여야 한다.
SELECT * FROM EMPLOYEES
WHERE JOB_ID = (SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID = 103);

SELECT * FROM EMPLOYEES
WHERE JOB_ID = (SELECT JOB_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 103 OR EMPLOYEE_ID = 104);
------------------------------------------------------
--다중행 서브쿼리 => IN, ANY, ALL 로 비교
SELECT SALARY FROM EMPLOYEES
WHERE FIRST_NAME = 'David';

--IN 동일한 값을 찾음 IN (4800,6800,9500) 처럼 쓰인 것과 동일하다.
SELECT * FROM EMPLOYEES
WHERE SALARY IN (SELECT SALARY FROM EMPLOYEES
                    WHERE FIRST_NAME = 'David');
--ANY 
-- 서브쿼리 값의 최대값 보단 작은, 최소값 보단 큰 값을 보여준다
SELECT * FROM EMPLOYEES
WHERE SALARY < ANY (SELECT SALARY FROM EMPLOYEES
                    WHERE FIRST_NAME = 'David');
-- ALL 
--서브쿼리 값의 최소값 보다 작은 , 최대값 보다 큰 값을 보여준다
SELECT * FROM EMPLOYEES
WHERE SALARY < ALL (SELECT SALARY FROM EMPLOYEES
                    WHERE FIRST_NAME = 'David');

--직업이 IT_PROG인 사람들보다 큰 급여를 받는 사람들
SELECT * FROM EMPLOYEES
WHERE SALARY > ALL (SELECT SALARY FROM EMPLOYEES WHERE JOB_ID='IT_PROG');
--직업이 IT_PROG인 사람들의 최소보다 큰 급여를 받는 사람들
SELECT * FROM EMPLOYEES
WHERE SALARY > ANY (SELECT SALARY FROM EMPLOYEES WHERE JOB_ID='IT_PROG');
------------------------------------------------------------------------
--스칼라 서브쿼리
--JOIN 시에 특정테이블의 하나의컬럼을 가지고 올 때 유용하다.
SELECT FIRST_NAME, EMAIL,  
    (SELECT DEPARTMENT_NAME FROM DEPARTMENTS D 
        WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID)
FROM EMPLOYEES E
ORDER BY EMAIL;
--F10
--위의 쿼리를 JOIN으로 표현했을 경우
SELECT FIRST_NAME, EMAIL, DEPARTMENT_NAME
FROM EMPLOYEES E
LEFT JOIN DEPARTMENTS D ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
ORDER BY EMAIL;
---각 부서의 매니저 이름을 출력
SELECT * FROM EMPLOYEES ORDER BY DEPARTMENT_ID;
SELECT * FROM DEPARTMENTS;

SELECT D.*,
    (SELECT FIRST_NAME FROM EMPLOYEES E 
    WHERE E.EMPLOYEE_ID = D.MANAGER_ID)MANAGER
FROM DEPARTMENTS D;

SELECT D.*,
    E.FIRST_NAME
FROM DEPARTMENTS D LEFT JOIN EMPLOYEES E ON D.MANAGER_ID = E.EMPLOYEE_ID;
--스칼라 답안
SELECT D.*,
    (SELECT FIRST_NAME FROM EMPLOYEES E WHERE E.EMPLOYEE_ID = D.MANAGER_ID)
FROM DEPARTMENTS D;

--스칼라쿼리는 여러번 가능
SELECT * FROM JOBS; -- JOB_TITLE 필요
SELECT * FROM DEPARTMENTS; --  부서이름 필요
SELECT * FROM EMPLOYEES; 

SELECT E.FIRST_NAME,
       E.JOB_ID,
       (SELECT JOB_TITLE FROM JOBS J WHERE J.JOB_ID = E.JOB_ID)JOB_TITLE,
       (SELECT DEPARTMENT_NAME FROM DEPARTMENTS D WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID)부서명
FROM EMPLOYEES E;

--각 부서의 사원 수, 부서정보를 출력
SELECT DEPARTMENT_ID, COUNT(*)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

SELECT D.*,
    NVL((SELECT COUNT(*) FROM EMPLOYEES E WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
        GROUP BY DEPARTMENT_ID),0)수
FROM DEPARTMENTS D;

-----------------------------------------------------------------------------
--인라인 뷰
--FROM 절에 SELECT 문이 들어감
--가짜 테이블 형태
SELECT ROWNUM, E.* FROM EMPLOYEES E ORDER BY SALARY DESC;

--ROWNUM은 조회된 순서이기 때문에, ORDER 와 같이 사용되면 ROWNUM이 섞이는 문제가 발생한다.
SELECT ROWNUM, SALARY, FIRST_NAME
FROM(SELECT * FROM EMPLOYEES E ORDER BY SALARY DESC);

SELECT ROWNUM, A.*
FROM ( SELECT FIRST_NAME,SALARY
        FROM EMPLOYEES
        ORDER BY SALARY
    ) A ;

--ROWNUM은 무조건 1번째부터 조회가 가능하기 때문에 그렇다.
SELECT ROWNUM, SALARY, FIRST_NAME
FROM(SELECT * FROM EMPLOYEES ORDER BY SALARY DESC)
WHERE ROWNUM BETWEEN 1 AND 10;

--2번째 인라인뷰에서 ROWNUM을 RN으로 컬럼화
SELECT *
FROM (SELECT ROWNUM AS RN , SALARY, FIRST_NAME
    FROM(SELECT * 
        FROM EMPLOYEES ORDER BY SALARY DESC)
)
WHERE RN>50 AND RN<100;
--인라인 뷰의 예시
SELECT TO_CHAR(REGDATE, 'YY-MM-DD')AS REGDATE, NAME
FROM (SELECT '홍길동' AS NAME,SYSDATE AS REGDATE FROM DUAL
        UNION ALL
        SELECT '이순신', SYSDATE FROM DUAL);

--인라인 뷰의 응용
--부서별 사원 수
SELECT D.*,E.TOTAL
FROM DEPARTMENTS D
LEFT JOIN (SELECT DEPARTMENT_ID, COUNT(*)AS TOTAL
    FROM EMPLOYEES 
    GROUP BY DEPARTMENT_ID)E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID;

--정리
--단일행 (대소비교) VS 다중행 서브쿼리(IN,ANY,ALL)
--스칼라 쿼리 :  LEFT JOIN과 같은 역할, 한번에 1개의 컬럼을 가져올 때
--인라인 뷰  : FROM절에 들어가는 가짜 테이블
--------------------------------------------------------------------------
--문제 1.
---EMPLOYEES 테이블에서 모든 사원들의 평균급여보다 높은 사원들의 데이터를 출력 하세요 ( AVG(컬럼) 사용)
---EMPLOYEES 테이블에서 모든 사원들의 평균급여보다 높은 사원들을 수를 출력하세요
---EMPLOYEES 테이블에서 job_id가 IT_PFOG인 사원들의 평균급여보다 높은 사원들을 데이터를 출력하세요
SELECT * FROM EMPLOYEES
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES);
SELECT COUNT(*) FROM EMPLOYEES 
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES);
SELECT * FROM EMPLOYEES
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG');

--문제 2.
---DEPARTMENTS테이블에서 manager_id가 100인 사람의 department_id와
--EMPLOYEES테이블에서 department_id가 일치하는 모든 사원의 정보를 검색하세요.
SELECT * FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE MANAGER_ID = 100);

--문제 3.
---EMPLOYEES테이블에서 “Pat”의 manager_id보다 높은 manager_id를 갖는 모든 사원의 데이터를 출력하세요
---EMPLOYEES테이블에서 “James”(2명)들의 manager_id와 갖는 모든 사원의 데이터를 출력하세요.
SELECT * FROM EMPLOYEES
WHERE MANAGER_ID > (SELECT MANAGER_ID FROM EMPLOYEES WHERE FIRST_NAME = 'Pat');

--문제 4.
---EMPLOYEES테이블 에서 first_name기준으로 내림차순 정렬하고, 41~50번째 데이터의 행 번호, 이름을 출력하세요
SELECT ROWNUM, E2.* FROM (
    SELECT ROWNUM AS RN ,E1.* FROM 
        (SELECT * FROM EMPLOYEES E ORDER BY FIRST_NAME DESC) E1
)E2
WHERE RN BETWEEN 41 AND 50;
--문제 5.
---EMPLOYEES테이블에서 hire_date기준으로 오름차순 정렬하고, 31~40번째 데이터의 행 번호, 사원id, 이름, 번호, 
--입사일을 출력하세요
SELECT ROWNUM, EMPLOYEE_ID,FIRST_NAME,PHONE_NUMBER,HIRE_DATE FROM (
    SELECT ROWNUM AS RN ,E1.* FROM 
        (SELECT * FROM EMPLOYEES E ORDER BY HIRE_DATE) E1
)E2
WHERE RN BETWEEN 31 AND 40;
---강사님거 ------
SELECT *
FROM (SELECT E.* ,ROWNUM RN
      FROM(SELECT EMPLOYEE_ID, FIRST_NAME||' '||LAST_NAME AS NAME,
                PHONE_NUMBER, HIRE_DATE
           FROM EMPLOYEES
           ORDER BY HIRE_DATE) E
      )
WHERE RN BETWEEN 31 AND 40;

--문제 6.
--employees테이블 departments테이블을 left 조인하세요
--조건) 직원아이디, 이름(성, 이름), 부서아이디, 부서명 만 출력합니다.
--조건) 직원아이디 기준 오름차순 정렬
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME, E.DEPARTMENT_ID, D.DEPARTMENT_NAME FROM 
EMPLOYEES E LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID ORDER BY EMPLOYEE_ID ASC;


--문제 7.
--문제 6의 결과를 (스칼라 쿼리)로 동일하게 조회하세요
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME, E.DEPARTMENT_ID,
(SELECT D.DEPARTMENT_NAME FROM DEPARTMENTS D WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID) 부서명
FROM EMPLOYEES E 
ORDER BY EMPLOYEE_ID ASC;

--문제 8.
--departments테이블 locations테이블을 left 조인하세요
--조건) 부서아이디, 부서이름, 매니저아이디, 로케이션아이디, 스트릿_어드레스, 포스트 코드, 시티 만 출력합니다
--조건) 부서아이디 기준 오름차순 정렬
SELECT * FROM LOCATIONS;
SELECT D.DEPARTMENT_ID,D.DEPARTMENT_NAME,D.MANAGER_ID,L.LOCATION_ID,L.STREET_ADDRESS,
    L.POSTAL_CODE,L.CITY 
FROM DEPARTMENTS D JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
ORDER BY DEPARTMENT_ID;
--문제 9.
--문제 8의 결과를 (스칼라 쿼리)로 동일하게 조회하세요
SELECT D.DEPARTMENT_ID,D.DEPARTMENT_NAME,D.MANAGER_ID,D.LOCATION_ID,
    (SELECT L.STREET_ADDRESS
        FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID)주소,
        (SELECT L.POSTAL_CODE
            FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID)우편번호,
            (SELECT L.CITY 
                FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID)도시
FROM DEPARTMENTS D ORDER BY DEPARTMENT_ID;

--문제 10.
--locations테이블 countries 테이블을 left 조인하세요
--조건) 로케이션아이디, 주소, 시티, country_id, country_name 만 출력합니다
--조건) country_name기준 오름차순 정렬
SELECT L.LOCATION_ID, L.STREET_ADDRESS, L.CITY,L.COUNTRY_ID,
    C.COUNTRY_NAME
FROM LOCATIONS L LEFT JOIN COUNTRIES C ON L.COUNTRY_ID = C.COUNTRY_ID
ORDER BY c.country_name;

--문제 11.
--문제 10의 결과를 (스칼라 쿼리)로 동일하게 조회하세요
SELECT L.LOCATION_ID, L.STREET_ADDRESS, L.CITY, L.COUNTRY_ID,
    (SELECT C.COUNTRY_NAME FROM COUNTRIES C WHERE L.COUNTRY_ID = C.COUNTRY_ID)나라
FROM LOCATIONS L 
ORDER BY 나라;

--문제 12. 
--employees테이블, departments테이블을 left조인 hire_date를 오름차순 기준으로 1-10번째 데이터만 출력합니다
--조건) rownum을 적용하여 번호, 직원아이디, 이름, 전화번호, 입사일, 부서아이디, 부서이름 을 출력합니다.
--조건) hire_date를 기준으로 오름차순 정렬 되어야 합니다. rownum이 틀어지면 안됩니다.
SELECT ROWNUM,E2.*
FROM (SELECT ROWNUM AS RN,E1.* 
        FROM (SELECT E.EMPLOYEE_ID,E.FIRST_NAME,E.PHONE_NUMBER,E.HIRE_DATE,E.DEPARTMENT_ID,D.DEPARTMENT_NAME
                FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID =D.DEPARTMENT_ID ORDER BY HIRE_DATE)E1)E2
WHERE RN BETWEEN 1 AND 10;
---------------강사님거 ----------------------

SELECT *
FROM(SELECT ROWNUM RN,A.*
        FROM (SELECT EMPLOYEE_ID,
                     FIRST_NAME,
                     PHONE_NUMBER,
                     HIRE_DATE,
                     E.DEPARTMENT_ID,
                     D.DEPARTMENT_NAME
                FROM EMPLOYEES E
                LEFT JOIN DEPARTMENTS D 
                ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
                ORDER BY HIRE_DATE)A)
WHERE RN BETWEEN 1 AND 10;



--문제 13. 
----EMPLOYEES 과 DEPARTMENTS 테이블에서 JOB_ID가 SA_MAN 사원의 정보의 LAST_NAME, JOB_ID, 
--DEPARTMENT_ID,DEPARTMENT_NAME을 출력하세요
SELECT E.LAST_NAME,E.JOB_ID,E.DEPARTMENT_ID,D.DEPARTMENT_NAME
FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.JOB_ID = 'SA_MAN';

------한번 더 연습 --------------
SELECT LAST_NAME,
       JOB_ID,
       E.DEPARTMENT_ID,
       DEPARTMENT_NAME
FROM EMPLOYEES E
JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.JOB_ID 
IN (SELECT JOB_ID FROM EMPLOYEES WHERE JOB_ID = 'SA_MAN');
---------------강사님거------
SELECT E.LAST_NAME,
       E.JOB_ID,
       E.DEPARTMENT_ID,
       D.DEPARTMENT_NAME
FROM (SELECT *
        FROM EMPLOYEES
        WHERE JOB_ID = 'SA_MAN')E
JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

--문제 14
----DEPARTMENT테이블에서 각 부서의 ID, NAME, MANAGER_ID와 부서에 속한 인원수를 출력하세요.
----인원수 기준 내림차순 정렬하세요.
----사람이 없는 부서는 출력하지 뽑지 않습니다
SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME, D.MANAGER_ID, E.사원수
FROM DEPARTMENTS D 
JOIN (SELECT DEPARTMENT_ID, COUNT(*) 사원수 FROM EMPLOYEES GROUP BY DEPARTMENT_ID) E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID;

------------한번 더 연습 보기좋게 정리해서 ----------

SELECT DEPARTMENT_NAME,
       MANAGER_ID,
       E.*
FROM DEPARTMENTS D
JOIN (SELECT DEPARTMENT_ID,
            COUNT(*)사원수
      FROM EMPLOYEES
      GROUP BY DEPARTMENT_ID) E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
ORDER BY E.사원수 DESC;
-------강사님 거 ------------------
SELECT D.DEPARTMENT_ID,
       D.DEPARTMENT_NAME,
       D.MANAGER_ID,
       E.인원수
FROM DEPARTMENTS D
JOIN (SELECT DEPARTMENT_ID,
             COUNT(*)AS 인원수
       FROM EMPLOYEES
       GROUP BY DEPARTMENT_ID)E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
ORDER BY 인원수 DESC;

--문제 15
----부서에 대한 정보 전부와, 주소, 우편번호, 부서별 평균 연봉을 구해서 출력하세요
----부서별 평균이 없으면 0으로 출력하세요

SELECT D.*, L.STREET_ADDRESS,L.POSTAL_CODE, NVL(E1.평균연봉,0)
    FROM DEPARTMENTS D 
        JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
        JOIN (SELECT D.DEPARTMENT_ID, TRUNC(AVG(E.SALARY))평균연봉 
            FROM EMPLOYEES E RIGHT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
            GROUP BY D.DEPARTMENT_ID) E1 ON E1.DEPARTMENT_ID = D.DEPARTMENT_ID; 
-----------한번 더 연습 보기 좋게 -------------
SELECT D.*,
       NVL(E.평균,0)평균
FROM (SELECT D.*,
               L.STREET_ADDRESS,
               L.POSTAL_CODE
      FROM DEPARTMENTS D
      JOIN LOCATIONS L
      ON D.LOCATION_ID = L.LOCATION_ID)D
LEFT JOIN (SELECT DEPARTMENT_ID,
                  TRUNC(AVG(SALARY))평균
           FROM EMPLOYEES
           GROUP BY DEPARTMENT_ID) E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
ORDER BY 평균 DESC;
-------------강사님거-----------------
SELECT D.*,
       L.STREET_ADDRESS,
       L.POSTAL_CODE,
       NVL(E.SALARY,0)SALARY
FROM DEPARTMENTS D
LEFT JOIN (SELECT DEPARTMENT_ID,
                  TRUNC(AVG(SALARY)) AS SALARY
           FROM EMPLOYEES
           GROUP BY DEPARTMENT_ID)E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
LEFT JOIN LOCATIONS L 
ON D.LOCATION_ID = L.LOCATION_ID;
--문제 16
----부서에 대한 정보 전부와, 주소, 우편번호, 부서별 평균 연봉을 구해서 출력하세요
----부서별 평균이 없으면 0으로 출력하세요
----DEPARTMENT_ID기준으로 내림차순 정렬해서 ROWNUM을 붙여 1-10데이터 까지만
--  출력하세요
SELECT * FROM DEPARTMENTS;
SELECT DEPARTMENT_ID,TRUNC(AVG(SALARY)) FROM EMPLOYEES GROUP BY DEPARTMENT_ID;

SELECT D.*, NVL(E.평균,0)급여평균, 
    (SELECT L.STREET_ADDRESS FROM LOCATIONS L
        WHERE D.LOCATION_ID=L.LOCATION_ID) STREET_ADDRESS,
    (SELECT L.POSTAL_CODE FROM LOCATIONS L
        WHERE D.LOCATION_ID = L.LOCATION_ID) POSTAL_CODE
FROM DEPARTMENTS D 
    JOIN (SELECT D1.DEPARTMENT_ID,TRUNC(AVG(E1.SALARY))평균 
            FROM EMPLOYEES E1 RIGHT JOIN DEPARTMENTS D1 
                ON E1.DEPARTMENT_ID=D1.DEPARTMENT_ID GROUP BY D1.DEPARTMENT_ID) E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
ORDER BY D.DEPARTMENT_ID DESC;

SELECT ROWNUM RN,E2.* 
FROM (SELECT D.*, NVL(E.평균,0)급여평균, 
        (SELECT L.STREET_ADDRESS FROM LOCATIONS L
            WHERE D.LOCATION_ID=L.LOCATION_ID) STREET_ADDRESS,
        (SELECT L.POSTAL_CODE FROM LOCATIONS L
            WHERE D.LOCATION_ID = L.LOCATION_ID) POSTAL_CODE
    FROM DEPARTMENTS D 
        JOIN (SELECT D1.DEPARTMENT_ID,TRUNC(AVG(E1.SALARY))평균 
                FROM EMPLOYEES E1 RIGHT JOIN DEPARTMENTS D1 
                    ON E1.DEPARTMENT_ID=D1.DEPARTMENT_ID GROUP BY D1.DEPARTMENT_ID) E
        ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
    ORDER BY D.DEPARTMENT_ID DESC)E2;

SELECT ROWNUM,E3.*
FROM (SELECT ROWNUM RN,E2.* 
        FROM (SELECT D.*, NVL(E.평균,0)급여평균, 
                (SELECT L.STREET_ADDRESS FROM LOCATIONS L
                    WHERE D.LOCATION_ID=L.LOCATION_ID) STREET_ADDRESS,
                (SELECT L.POSTAL_CODE FROM LOCATIONS L
                    WHERE D.LOCATION_ID = L.LOCATION_ID) POSTAL_CODE
            FROM DEPARTMENTS D 
                JOIN (SELECT D1.DEPARTMENT_ID,TRUNC(AVG(E1.SALARY))평균 
                        FROM EMPLOYEES E1 RIGHT JOIN DEPARTMENTS D1 
                            ON E1.DEPARTMENT_ID=D1.DEPARTMENT_ID GROUP BY D1.DEPARTMENT_ID) E
                ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
            ORDER BY D.DEPARTMENT_ID DESC)E2) E3
WHERE RN BETWEEN 1 AND 10;

---------------한번 더 연습 보기 좋게---------
SELECT *
FROM (SELECT ROWNUM RN, A.*
        FROM (SELECT D.*,
                    L.STREET_ADDRESS,
                    L.POSTAL_CODE,
                    (SELECT TRUNC(AVG(SALARY))
                     FROM EMPLOYEES E
                     WHERE  E.DEPARTMENT_ID = D.DEPARTMENT_ID
                     GROUP BY E.DEPARTMENT_ID) 평균연봉
                FROM DEPARTMENTS D
                JOIN LOCATIONS L 
                ON L.LOCATION_ID = D.LOCATION_ID
                ORDER BY DEPARTMENT_ID DESC)A )
WHERE RN BETWEEN 1 AND 10;
    
--------------강사님거------------------

SELECT *
FROM (SELECT ROWNUM RN,A.*
        FROM(SELECT D.*,
                       L.STREET_ADDRESS,
                       L.POSTAL_CODE,
                       NVL(E.SALARY,0)SALARY
                FROM DEPARTMENTS D
                LEFT JOIN (SELECT DEPARTMENT_ID,
                                  TRUNC(AVG(SALARY)) AS SALARY
                           FROM EMPLOYEES
                           GROUP BY DEPARTMENT_ID)E
                ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
                LEFT JOIN LOCATIONS L 
                ON D.LOCATION_ID = L.LOCATION_ID
                ORDER BY D.DEPARTMENT_ID DESC) A)
WHERE RN BETWEEN 1 AND 10;









