--WHERE 절
SELECT * FROM EMPLOYEES;
SELECT * FROM EMPLOYEES WHERE SALARY = 4800;
SELECT * FROM EMPLOYEES WHERE SALARY <> 4800;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID >=100 ORDER BY EMPLOYEE_ID ASC;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID <100 ORDER BY EMPLOYEE_ID ASC;
SELECT * FROM EMPLOYEES WHERE JOB_ID = 'AD_ASST'; --문자
SELECT * FROM EMPLOYEES WHERE HIRE_DATE = '03/09/17'; --날짜

--------------------------------------------------------------------------------
--BETWEEN~AND, IN, LIKE
SELECT * FROM EMPLOYEES 
WHERE SALARY BETWEEN 6000 AND 9000
ORDER BY SALARY; 

--날짜도 대소비교가 가능, 하지만 좋은 방법은 아님
SELECT * FROM EMPLOYEES
WHERE HIRE_DATE BETWEEN '08/01/01' AND '08/12/31'
ORDER BY HIRE_DATE; 

SELECT * FROM EMPLOYEES
WHERE DEPARTMENT_ID IN(10,20,30,40,50);

SELECT * FROM EMPLOYEES
WHERE JOB_ID IN ('ST_MAN', 'IT_PROG', 'HR_REP');

SELECT * FROM EMPLOYEES 
WHERE JOB_ID LIKE 'IT%';

SELECT * FROM EMPLOYEES
WHERE HIRE_DATE LIKE '03%';

SELECT * FROM EMPLOYEES
WHERE HIRE_DATE LIKE '%03';

SELECT * FROM EMPLOYEES
WHERE HIRE_DATE LIKE '%12%'; --12월, 12일, 12년 다 포함

SELECT * FROM EMPLOYEES
WHERE HIRE_DATE LIKE '___05%'; --5월

SELECT * FROM EMPLOYEES
WHERE EMAIL LIKE '_A%'; --2번째 글자가 A로 시작하는 EMAIL 조회

--IS NULL, IS NOT NULL
SELECT * FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;

SELECT * FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;

--AND 가 OR 보다 연산 우선 순위가 높기 때문에 OR를 먼저 묶고싶으면 소괄호를 이용
SELECT FIRST_NAME, JOB_ID, SALARY
FROM EMPLOYEES
WHERE (JOB_ID = 'IT_PROG' OR JOB_ID = 'FI_MGR')
AND SALARY >= 6000;

--NOT, OR, AND
SELECT * FROM EMPLOYEES 
WHERE NOT SALARY >=6000;

SELECT FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG' OR SALARY >=6000;

SELECT FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG' AND SALARY >=6000;

--AND 와 OR의 우선순위 확인
SELECT FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE JOB_ID='IT_PROG' OR JOB_ID = 'FI_MGR' AND SALARY >=6000;
--소괄호 이용하여 우선순위 지정
SELECT FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE (JOB_ID='IT_PROG' OR JOB_ID = 'FI_MGR') AND SALARY >=6000;
---------------------------------------------------------------------
--ORDER BY
SELECT FIRST_NAME, SALARY*12 AS ANNSAL FROM EMPLOYEES
ORDER BY ANNSAL ASC, FIRST_NAME ASC;

SELECT * FROM EMPLOYEES ORDER BY HIRE_DATE; --날짜기준 오름차순
SELECT * FROM EMPLOYEES ORDER BY HIRE_DATE DESC; -- 내림차순

SELECT * FROM EMPLOYEES WHERE JOB_ID IN('IT_PROG', 'ST_MAN')
ORDER BY FIRST_NAME DESC;

SELECT * FROM EMPLOYEES WHERE SALARY
BETWEEN 6000 AND 120000 ORDER BY EMPLOYEE_ID;

--ORDER BY절에 ALIAS도 사용 가능 
SELECT FIRST_NAME, SALARY*12 AS ANNSAL FROM EMPLOYEES
ORDER BY ANNSAL DESC;
--정렬 여러개 ,로 나열
--먼저 적힌 순서로 정렬
SELECT FIRST_NAME, SALARY, JOB_ID FROM EMPLOYEES
ORDER BY JOB_ID ASC, SALARY DESC;

